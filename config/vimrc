"
" vim settings by Joakim Tufvegren
"
scriptencoding utf-8
set encoding=utf-8

" ------ Basic settings ------
set background=dark

" Search without case if search terms are lowercase
set ignorecase smartcase
" Show matching search while typing
if exists('&incsearch')
  set incsearch
endif

" Tabsettings
set tabstop=2 smartindent backspace=2 shiftwidth=2 expandtab
let g:yaifa_tabstop = 2
let g:yaifa_shiftwidth = 2
let g:yaifa_expandtab = 2

" Enable ruler
set ruler

" Enable syntax highlightning
syntax on

" Removes the possbility to execute code from the opened file when it is
" opened in vim. This might be a security risk
set nomodeline

" Fix gvim background color
if has('gui_running')
  highlight Normal guifg=#b2b2b2 guibg=#000000
endif

" Nice listchars (used with :set list)
set listchars=tab:·\ ,eol:¬,trail:×

" ------ Omni-completion and youcompleteme ------
silent! packadd! youcompleteme
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set completeopt=menuone
" Use SQL omnicomplete without dbext by default
let g:omni_sql_default_compl_type = 'syntax'
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
" Disable clang error highlighting, pairs badly with pkg-config libs...
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0

" ------ Highlight trailing whitespace and space before tab ------
" Only do this part when compiled with support for autocommands
if has("autocmd")
  highlight ExtraWhitespace ctermbg=darkred guibg=darkred
  autocmd ColorScheme * highlight ExtraWhitespace ctermbg=darkred guibg=darkred
  autocmd BufWinEnter * match ExtraWhitespace /\(\s\+$\| \+\ze\t\)/
  autocmd InsertEnter * match ExtraWhitespace /\(\s\+\%#\@<!$\| \+\ze\t\)/
  autocmd InsertLeave * match ExtraWhitespace /\(\s\+$\| \+\ze\t\)/
  if version >= 702
    autocmd BufWinLeave * call clearmatches()
  endif
endif

" ------ Add command to fix trailing whitespace ------
function! <SID>StripTrailingWhitespace()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
command StripTWS call <SID>StripTrailingWhitespace()

" ------ Add w!! to write with sudo privileges ------
command SudoWrite %!sudo tee > /dev/null %
cabbrev w!! <c-r>=(getcmdpos()==1 && getcmdtype()==':' ? 'SudoWrite' : 'w!!')<CR>

" ------ Disable smartindent/autoindent for git commit messages ------
" Only do this part when compiled with support for autocommands
if has("autocmd")
  autocmd FileType gitcommit setlocal noautoindent nosmartindent
endif

" ------ Configure RainbowParentheses ------
let g:rainbow_active = 1
let g:rainbow_conf = {
\    'guifgs': ['#5ed4fb', '#ffffaf', '#afffff', '#ffd7ff']
\}

" ------ Add g<Tab> shortcut to quickly change to last active tab ------
if !exists('g:Lasttab')
  let g:Lasttab = 1
  let g:Lasttab_backup = 1
endif
autocmd! TabLeave * let g:Lasttab_backup = g:Lasttab | let g:Lasttab = tabpagenr()
autocmd! TabClosed * let g:Lasttab = g:Lasttab_backup
nmap <silent> g<Tab> :exe "tabn " . g:Lasttab<cr>
