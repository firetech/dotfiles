#
# ZSH config by Joakim Tufvegren
#
# Adapted from different sources on the Interblag.
# Mutated heavily over the years.
#

# Some options
setopt autolist                # List alternatives on tab completion
setopt autoremoveslash         # Remove '/' from completion
setopt braceccl                # Allow expressions like {a-zA-Z}
setopt correct                 # Try to correct spelling of commands
setopt extendedglob            # Use zsh extended globbing
setopt hashdirs                # Hash whole dir on exec
setopt hashlistall             # Hash all on first completion
setopt histignoredups          # No duplicates in history
setopt histreduceblanks        # History pretty printer
setopt listtypes               # Incl type in completion alternatives
setopt longlistjobs            # List jobs in long format
setopt nonomatch               # No errors for unmatched patterns
setopt completeinword          # Completion in the middle of word
setopt listpacked              # Variable col width for alternatives
setopt noclobber               # Don't overwrite files with >
setopt autopushd               # Make cd act like pushd
setopt pushdminus              # Invert order for 'cd -X/+X'
setopt pushdignoredups         # No duplicates on dirstack
setopt append_history          # Append history file instead of overwriting it
setopt histignorespace         # Don't add space indented lines to history
REPORTTIME=15                  # Report usage stats for long running commands

# Preserve history
HISTSIZE=2000
HISTFILE=~/.zsh_history
SAVEHIST=2000

# Use and preserve directory stack
DIRSTACKSIZE=20
DIRSTACKFILE=~/.zdirs
if [[ -f $DIRSTACKFILE && $#dirstack -eq 0 ]]; then
    dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
    # Make 'cd -' go to exit dir of last shell
    if [[ -d $dirstack[1] && $dirstack[1] != $PWD ]]; then
        cd $dirstack[1] && cd $OLDPWD
    elif [[ $dirstack[1] == $PWD ]]; then
        # Exit dir of last shell is $PWD, pop to avoid duplicates
        popd > /dev/null
    fi
fi
TRAPEXIT() {
    [[ -e $DIRSTACKFILE ]] || touch $DIRSTACKFILE
    dirstack=( $PWD $dirstack )
    print -l ${(u)dirstack} >| $DIRSTACKFILE
}

# If $EDITOR begins with vi, ZSH goes into vi mode, and that's a bit too nerdy
bindkey -e

# Make Home & End work as expected
bindkey '\eOH' beginning-of-line
bindkey '\e[1~' beginning-of-line
bindkey '\e[H' beginning-of-line
bindkey '\eOF' end-of-line
bindkey '\e[4~' end-of-line
bindkey '\e[F' end-of-line

# Fix Delete and Ctrl+H
bindkey '\e[3~' delete-char
bindkey '^H' backward-delete-word

# Ctrl+Left/Right for prev/next word
[[ -z $terminfo[kLFT5] ]] || bindkey $terminfo[kLFT5] backward-word
[[ -z $terminfo[kRIT5] ]] || bindkey $terminfo[kRIT5] forward-word
# These are for PuTTY, but the Linux text console uses the same escape code
# for Left/Right without any modifiers...
[[ $terminfo[kcub1] == "[D" ]] || bindkey '\e[D' backward-word
[[ $terminfo[kcuf1] == "[C" ]] || bindkey '\e[C' forward-word

# Make Alt+Up/Down use quick search
[[ -z $terminfo[kUP3] ]] || bindkey $terminfo[kUP3] history-beginning-search-backward
[[ -z $terminfo[kDN3] ]] || bindkey $terminfo[kDN3] history-beginning-search-forward
# PuTTY being special again (although, to be fair, this is how many Alt+___
# escape codes work)...
[[ -z $terminfo[kcuu1] ]] || bindkey "\e${terminfo[kcuu1]}" history-beginning-search-backward
[[ -z $terminfo[kcud1] ]] || bindkey "\e${terminfo[kcud1]}" history-beginning-search-forward

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
    autoload -Uz add-zle-hook-widget
    function zle_application_mode_start { echoti smkx }
    function zle_application_mode_stop { echoti rmkx }
    add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
    add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Some handy aliases
alias ls="ls -F"
alias d='ls'
alias dl='ls -la'
alias l='ls'
alias ll='ls -l'
alias la='ls -la'
alias vim='vim -p'
alias view='view -p'
# I've made mistakes too many times...
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Enable progress on dd if supported
dd_bin="dd"
if [[ -x =gdd ]]; then
    dd_bin="gdd"
fi
if $dd_bin status=progress count=0 > /dev/null 2>&1; then
    alias dd="$dd_bin status=progress"
fi
unset dd_bin

# Enable color support of ls and grep
if [[ $TERM != dumb ]]; then
    ls_bin="ls"
    grep_bin="grep"
    if [[ -x =dircolors ]]; then
        # Support for systems where GNU ls is placed elsewhere
        dircolors_path==dircolors
        better_ls_bin="${dircolors_path:h}/ls"
        unset dircolors_path
        if [[ -x "$better_ls_bin" ]]; then
            ls_bin="$better_ls_bin"
        fi
        unset better_ls_bin

        eval "$(dircolors -b ~/.dircolors)"

    # Fallback to default BSD names
    elif [[ -x =gdircolors && -x =gls ]]; then
        eval "$(gdircolors -b ~/.dircolors)"
        ls_bin="gls"
        [[ ! -x =ggrep ]] || grep_bin="ggrep"
    fi

    # Test if ls supports --color=auto
    if $ls_bin --color=auto >/dev/null 2>&1; then
        alias ls="$ls_bin -F --color=auto"
    else
        alias ls="$ls_bin -F"
    fi

    # Test if grep supports --color=auto
    if echo a | $grep_bin --color=auto a >/dev/null 2>&1; then
        alias grep="$grep_bin --color=auto"
    else
        alias grep="$grep_bin"
    fi

    unset ls_bin grep_bin
fi

# Use other tmux.conf/screenrc if $terminfo says unmodified arrow keys are incompatible
if [[ $terminfo[kcuu1] == "[A" || $terminfo[kcud1] == "[B" ]]; then
    alias tmux='tmux -f ~/.tmux.compat.conf'
    if [[ -z $SCREENRC ]]; then
        export SCREENRC="$HOME/.screenrc.compat"
    fi
fi

# Set terminal title
case $TERM in
    (xterm*|*rxvt*)
        preexec () { print -Pn "\e]0;%n@%m: ${1[(wr)^(*=*|sudo|-*)]}\a" }
        precmd () { print -Pn "\e]0;%n@%m: %~\a" }
        ;;
    (tmux*|screen*)
        preexec () { print -Pn "\ek${1[(wr)^(*=*|sudo|-*)]}\e\\" }
        precmd () { print -Pn "\ek%~\e\\" }
        ;;
esac

# Enable completion
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle :compinstall filename '~/.zshrc'
autoload -Uz compinit
$(print -Pn "compinit -d '$HOME/.zcompdump.%m'")


# Set prompt
setopt prompt_subst
typeset -A prc
prc[promptchar]="%B%(?.%F{green}.%F{red})%#%f%b"
prc[userspec]="%B%(!.%F{red}.%F{green})%n@%m%f%b"
export PROMPT='${VIRTUAL_ENV_PROMPT}'"${prc[userspec]}:%B%F{blue}%~%(1~./.)%f%b${prc[promptchar]} "

# Load git prompt if possible
[[ ! -x =git || ! -f ~/.zshrc.git ]] || source ~/.zshrc.git

# System management aliases
if [[ -x =apt ]]; then
    # ag = apt-get (now apt)
    alias agu='sudo apt update'
    alias agug='sudo apt upgrade'
    alias agugd='sudo apt full-upgrade' # = apt-get dist-upgrade
    alias agi='sudo apt install'
    alias agir='sudo apt install --reinstall'
    alias agr='sudo apt remove'
    alias agrp='sudo apt purge'
    alias agra='sudo apt autoremove'
    alias agrap='sudo apt autoremove --purge'
    alias agc='sudo apt autoclean'
    alias agtc='sudo apt clean'

    # ac = apt-cache (now apt)
    alias acs='apt search'
    alias acv='apt show'
    alias acp='apt-cache policy'

    # at = aptitude
    alias ats='echo Searching... ; aptitude search'
    alias atv='aptitude show'

    alias au='sudo apt update && sudo apt full-upgrade'

    alias di='sudo dpkg -i'
    alias drc='sudo dpkg-reconfigure'
    alias dlf='dpkg -L'
fi
if [[ -f /var/log/syslog ]]; then
    sudo='sudo '
    [[ ! -r /var/log/syslog ]] || sudo=''
    alias syslog="${sudo}tail -F /var/log/syslog"
    unset sudo
fi

alias vim_swp_reopen='vim -p $(find . -name .\*.sw? | sed -e "s/\/\.\(.*\)\.sw.$/\/\1/g")'

# Functions to update dotfiles and reload ZSH config
update_dotfiles() {
    local zshrc="$HOME/.zshrc"
    local repo="${zshrc:A:h:h}"
    zsh "$repo/.update.zsh" $@

    local estatus=$?
    if [[ $estatus -eq 0x8 ]]; then
        reload_zshconfig
        return 0
    else
        return $estatus
    fi
}
reload_zshconfig() {
    __skip_update=1

    source ~/.zshenv
    source ~/.zshrc

    unset __skip_update
}

# Local overrides/additions
[[ ! -f ~/.zshrc.local ]] || source ~/.zshrc.local

# Clean up
unset prc

# Update and possibly reload config.
[[ $__skip_update == 1 ]] || update_dotfiles auto
